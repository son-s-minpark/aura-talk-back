name: CI/CD with OIDC

on:
  push:
    branches: [ 'develop', 'main' ]
  pull_request:
    branches: [ 'develop', 'main' ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Set application.yml file
        uses: microsoft/variable-substitution@v1
        with:
          files: './src/main/resources/application.yml'
        env:
          spring.datasource.url: ${{ secrets.DB_LOCAL_URL }}
          spring.datasource.username: ${{ secrets.DB_USERNAME }}
          spring.datasource.password: ${{ secrets.DB_PASSWORD }}
          spring.jpa.hibernate.ddl-auto: ${{ secrets.JPA_DDL_AUTO }}
          spring.jpa.properties.hibernate.show_sql: ${{ secrets.SHOW_SQL }}
          spring.data.redis.port: ${{ secrets.REDIS_PORT }}
          spring.data.redis.host: ${{ secrets.REDIS_LOCAL_HOST }}
          spring.data.redis.password: ${{ secrets.REDIS_PASSWORD }}
          spring.mail.username: ${{ secrets.MAIL_USERNAME }}
          spring.mail.password: ${{ secrets.MAIL_PASSWORD }}
          jwt.secret: ${{ secrets.JWT_SECRET }}
          jwt.token-validity-in-milliseconds: ${{ secrets.JWT_EXPIRATION }}
          server.port: ${{ secrets.SERVER_PORT }}
          swagger.servers.prodHttps: ${{ secrets.HTTPS_URL }}
          swagger.servers.prodHttp: ${{ secrets.HTTP_URL }}
          cloud.aws.credentials.access-key: ${{ secrets.S3_ACCESS_KEY }}
          cloud.aws.credentials.secret-key: ${{ secrets.S3_SECRET_KEY }}
          cloud.aws.s3.bucket: ${{ secrets.S3_BUCKET_NAME }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-northeast-2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/aura-talk-back:${GITHUB_SHA::6} .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/aura-talk-back:${GITHUB_SHA::6}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-northeast-2

      - name: Get current deployment environment
        run: |
          CURRENT_ENV=$(aws ssm get-parameter --name "current_env" --query "Parameter.Value" --output text || echo "none")
          echo "Current environment: $CURRENT_ENV"
          
          if [ "$CURRENT_ENV" == "blue" ]; then
            echo "TARGET_ENV=green" >> $GITHUB_ENV
            echo "TARGET_PORT=8082" >> $GITHUB_ENV
          else
            echo "TARGET_ENV=blue" >> $GITHUB_ENV
            echo "TARGET_PORT=8081" >> $GITHUB_ENV
          fi

      - name: Deploy application on EC2
        id: deploy
        run: |
          COMMAND_ID=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets "Key=instanceids,Values=${{ secrets.EC2_INSTANCE_ID }}" \
          --parameters "commands=[
           \"echo $TARGET_ENV\",
           \"cd /home/ubuntu/app/$TARGET_ENV\",
           \"sed -i 's|image: ${{ secrets.DOCKER_HUB_USERNAME }}/aura-talk-back:.*|image: ${{ secrets.DOCKER_HUB_USERNAME }}/aura-talk-back:${GITHUB_SHA::6}|' docker-compose.yml\",
           \"docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/aura-talk-back:${GITHUB_SHA::6}\",
           \"docker compose down || true\",
           \"docker compose up -d\",
          
           \"sleep 60\",
           \"HEALTH_STATUS='failed'\",
           \"for i in {1..12}; do \",
           \"  if curl -s http://localhost:$TARGET_PORT/api/health | grep -q '\\\"success\\\":true'; then\",
           \"    echo 'Health check passed!'\",
           \"    HEALTH_STATUS='success'\",
           \"    break\",
           \"  fi\",
           \"  echo 'Waiting for health check...'\",
           \"  sleep 10\",
           \"done\",
          
           \"if [ \\\"\$HEALTH_STATUS\\\" = \\\"success\\\" ]; then\",
           \"  echo 'Deployment successful'\",
           \"  rm -f /home/ubuntu/app/current\",
           \"  ln -s /home/ubuntu/app/$TARGET_ENV /home/ubuntu/app/current\",
           \"  sudo nginx -t && sudo systemctl reload nginx\",
           \"  docker image prune -a -f\",
           \"  exit 0\",
           \"else\",
           \"  echo 'Health check failed!'\",
           \"  exit 1\",
           \"fi\",
          
          ]" \
          --comment "Deploy application" \
          --query "Command.CommandId" --output text)
          
          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_ENV

      - name: Check SSM command status
        run: |
          STATUS="InProgress"
          while [[ "$STATUS" == "InProgress" || "$STATUS" == "Pending" ]]; do
            sleep 5
            STATUS=$(aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
              --query "Status" --output text)
            echo "Current Status: $STATUS"
          done
          
          EXIT_CODE=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query "ResponseCode" --output text)
          
          if [[ "$EXIT_CODE" == "0" ]]; then
          echo "HEALTH_STATUS=success" >> $GITHUB_ENV
          else
          echo "HEALTH_STATUS=failed" >> $GITHUB_ENV
          fi

      - name: Get SSM command output
        run: |
          aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query "{StandardOutputContent: StandardOutputContent, StandardErrorContent: StandardErrorContent}" \
            --output json

      - name: Send Discord alert on deployment failure
        if: env.HEALTH_STATUS == 'failed'
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: '"AuraTalk 배포 실패! ${{ env.TARGET_ENV }} 환경에서 헬스 체크가 실패했습니다. (브랜치: ${{ github.ref_name }})"'

      - name: Update current environment or Exit on failure
        run: |
          if [[ "$HEALTH_STATUS" == "success" ]]; then
            aws ssm put-parameter --name "current_env" --value "$TARGET_ENV" --type "String" --overwrite
          else
            echo "Health check failed! Skipping parameter update."
            exit 1
          fi